module.exports = options => {
  const dependencies = {
    "@looker/extension-sdk": "^25.4.0",
    "@looker/extension-sdk-react": "^25.4.0",
    "react": "^17.0.0",
    "react-dom": "^17.0.0",
    "react-is": "^17.0.0",
    "react-router-dom": "^5.3.0"
  };

  if (options.useRecommendedPackages) {
    dependencies["@looker/components"] = "^5.0.3";
    dependencies["@looker/embed-sdk"] = "^2.0.6";
    dependencies["@looker/sdk"] = "^25.4.0";
    dependencies["@looker/sdk-rtl"] = "^21.6.0";
    dependencies["@styled-icons/material"] = "10.34.0";
    dependencies["@styled-icons/material-outlined"] = "10.34.0";
    dependencies["@styled-icons/material-rounded"] = "10.34.0";
    dependencies["lodash"] = "^4.17.21";
    dependencies["styled-components"] = "^5.3.3";
    dependencies["swr"] = "^2.3.3";
    dependencies["usehooks-ts"] = "^3.1.1";
  } else {
    if (options.useEmbedSDK) {
      dependencies["@looker/embed-sdk"] = "^2.0.6";
    }

    if (options.useLookerSDK) {
      dependencies["@looker/sdk"] = "^25.4.0";
      dependencies["@looker/sdk-rtl"] = "^21.6.0";
    }

    if (options.uiFramework === '@looker/components') {
      dependencies["@looker/components"] = "^5.0.3";
      dependencies["@styled-icons/material"] = "10.34.0";
      dependencies["@styled-icons/material-outlined"] = "10.34.0";
      dependencies["@styled-icons/material-rounded"] = "10.34.0";
      dependencies["lodash"] = "^4.17.21";
      dependencies["styled-components"] = "^5.3.3";
    }

    if (options.uiFramework === '@mui/material') {
      dependencies["@mui/material"] = "^5.15.15";
      dependencies["@emotion/react"] = "^11.11.4";
      dependencies["@emotion/styled"] = "^11.11.5";
    }
  }

  const packageJson = {
    name: options.projectName,
    version: "0.0.1",
    description: "Bootstrapped Looker Extension with React and Javascript",
    main: "dist/bundle.js",
    scripts: {
      analyze: "export ANALYZE_MODE=static && npm run build",
      build: "export BABEL_ENV=build && webpack --config webpack.prod.js",
      clean: "rm -rf dist",
      develop: "webpack serve --hot --port 8080 --config webpack.develop.js",
      prebuild: "npm run clean",
      lint: "eslint src --ext js,jsx --fix",
      format: "prettier --write src"
    },
    author: "yournamehere",
    license: "Apache-2.0",
    engines: {
      node: ">=14"
    },
    dependencies: dependencies,
    devDependencies: {
      "@babel/cli": "^7.23.4",
      "@babel/core": "^7.23.7",
      "@babel/plugin-transform-class-properties": "^7.23.3",
      "@babel/plugin-transform-private-methods": "^7.23.3",
      "@babel/plugin-transform-private-property-in-object": "^7.23.4",
      "@babel/plugin-transform-react-jsx": "^7.23.4",
      "@babel/plugin-transform-runtime": "^7.23.7",
      "babel-plugin-styled-components": "^2.1.4",
      "@babel/preset-env": "^7.23.8",
      "@babel/preset-react": "^7.23.3",
      "@babel/preset-typescript": "^7.23.3",
      "@babel/runtime": "^7.23.8",
      "babel-loader": "^9.1.3",
      "dotenv": "^16.3.1",
      "webpack": "^5.89.0",
      "webpack-bundle-analyzer": "^4.10.1",
      "webpack-cli": "^5.1.4",
      "webpack-dev-server": "^4.15.1",
      "style-loader": "3.3.1",
      "css-loader": "6.7.1",
      "eslint": "^8.57.0",
      "eslint-config-prettier": "^9.1.0",
      "eslint-plugin-import": "^2.29.1",
      "eslint-plugin-react": "^7.34.1",
      "eslint-plugin-react-hooks": "^4.6.0",
      "prettier": "^2.8.0"
    },
    babel: {
      presets: [
        "@babel/preset-env",
        [
          "@babel/preset-react",
          {
            runtime: "automatic"
          }
        ]
      ],
      plugins: [
        [
          "@babel/plugin-transform-class-properties",
          {
            loose: true
          }
        ],
        ["@babel/plugin-transform-private-methods", { "loose": true }],
        [
          "@babel/plugin-transform-private-property-in-object",
          {
            loose: true
          }
        ],
        [
          "@babel/plugin-transform-react-jsx",
          {
            pragmaFrag: "React.Fragment"
          }
        ]
      ]
    }
  };

  return JSON.stringify(packageJson, null, 2);
};